# Progetto "theGYM" per Obsidian

Benvenuto nel progetto "theGYM"! Questa è una configurazione personalizzata per Obsidian pensata per aiutarti a tracciare, gestire e analizzare i tuoi allenamenti di fitness e bodybuilding.

## Obiettivo del Progetto

L'obiettivo principale di "theGYM" è fornire un sistema flessibile e integrato all'interno di Obsidian per:
* Registrare i dettagli di ogni sessione di allenamento e di ogni esercizio.
* Visualizzare i progressi nel tempo, come l'aumento del volume o della forza.
* Organizzare routine di allenamento e schede.
* Mantenere note dettagliate su esercizi specifici, tecniche e sensazioni.

## Struttura della Cartella (Esempio Consigliato)

Una struttura di cartelle ben organizzata è fondamentale. Ecco un suggerimento:

```
└── 📁theGYM
    └── 📁Esercizi
        └── 📁Data
            └── Abductor.md
        └── Esercizi database.md
    └── 📁Log
        └── 📁Data
            └── Abductor-0404-185910.md
        └── Log Database.md
    └── 📁macchine
        └── 📁data
            └── chest press inclined PURE.md
        └── machine database.md
    └── 📁Scripts
        └── ExerciseLogTable.js
        └── VolumeChartTemplate.js
    └── 📁Workouts
        └── 📁Attuale
            └── Giorno 1 Parte Inferiore (Glutei & Quadricipiti).md
        └── 📁esempio
            └── esempio.md
        └── 📁Vecchio
            └── Allenamento A – Glutei + Quadricipiti leggeri + Addome.md
    └── .gitignore
    └── README
```

## Componenti Chiave

### 1. Note degli Esercizi (`theGYM/Esercizi/`)
Ogni file `.md` in questa cartella descrive un singolo esercizio. Può includere:
* Nome dell'esercizio (es. `nome_esercizio: Panca Piana` nel frontmatter o come titolo).
* Descrizione, tecnica di esecuzione.
* Muscoli coinvolti.
* Note personali, video, immagini.
* Blocchi `dataviewjs` per visualizzare i log e i grafici di volume specifici per quell'esercizio.

### 2. Note degli Allenamenti (`theGYM/Workouts/`)
Ogni file `.md` qui rappresenta una scheda di allenamento o una routine specifica. Può contenere:
* L'elenco degli esercizi da eseguire.
* Serie, ripetizioni, tempi di recupero target.
* Blocchi `dataviewjs` per visualizzare i log degli esercizi eseguiti durante quell'allenamento o il volume totale dell'allenamento.

### 3. File di Log (`theGYM/Log/Data/`)
Questi sono i file individuali creati per ogni volta che completi un esercizio o una serie. Sono fondamentali per il tracciamento dei dati. La struttura consigliata per questi file è:

**Nome File:** `NomeEsercizio-MMGG-HHmmss.md` (generato automaticamente dallo script `ExerciseLogTable_Combined.js`)

**Contenuto (Frontmatter YAML o Campi Inline Dataview):**
* `Esercizio:: [[NomeEsercizio]]` (Link alla nota dell'esercizio)
* `Origine:: [[NomeAllenamento]]` (Link alla nota dell'allenamento)
* `DataOra:: AAAA-MM-GGTHH:mm:ss` (Timestamp preciso della registrazione)
* `Rep:: numero`
* `Weight:: numero` (Peso utilizzato)
* `Volume:: numero` (Solitamente Reps * Peso)
* Altri campi personalizzati (es. `Set:: 1`, `NoteSet:: "Buona forma!"`, `RPE:: 8`)

### 4. Script DataviewJS (`theGYM/Scripts/`)

#### a. `ExerciseLogTable_Combined.js`
Questo script visualizza una tabella dei tuoi log di esercizi. Permette di filtrare per esercizio e/o per allenamento e include un bottone per aggiungere rapidamente nuovi log basati su un template.
* **Come usarlo:** Vedi le istruzioni dettagliate all'inizio del file `ExerciseLogTable_Combined.js` stesso.
* **Funzionalità principali:**
    * Visualizzazione tabulare dei log.
    * Filtro per nome esercizio e/o nome allenamento.
    * Creazione rapida di nuovi file di log con campi preimpostati.

#### b. `VolumeChartTemplate.js`
Questo script genera un grafico lineare che mostra l'andamento del volume nel tempo. Può essere configurato per visualizzare il volume di un singolo esercizio o il volume totale di un intero allenamento aggregando i dati dai file di log.
* **Come usarlo:** Vedi le istruzioni dettagliate all'inizio del file `VolumeChartTemplate.js`.
* **Funzionalità principali:**
    * Grafico del volume (kg) per data.
    * Visualizzazione opzionale di un header con l'analisi del trend (aumento, diminuzione, stabile) e la variazione percentuale.
    * Visualizzazione opzionale di un box con statistiche aggiuntive (volume medio, massimo, minimo, numero sessioni, trend recente).
    * Modalità per singolo esercizio o per volume totale dell'allenamento.

## Flusso di Lavoro Consigliato

1.  **Definisci i tuoi Esercizi:** Crea una nota per ogni esercizio che esegui nella cartella `theGYM/Esercizi/`.
2.  **Crea le tue Schede di Allenamento:** Definisci le tue routine nella cartella `theGYM/Workouts/`. In queste note, puoi elencare gli esercizi e, per ognuno, inserire un blocco `dataviewjs` che chiama `ExerciseLogTable_Combined.js` per visualizzare e aggiungere log specifici per quell'esercizio nel contesto dell'allenamento corrente.
    * Esempio per un esercizio in una scheda:
        ```dataviewjs
        await dv.view("theGYM/Scripts/ExerciseLogTable_Combined.js", {
            input: {
                exercise: "Panca Piana", // Nome dell'esercizio corrente
                workout: dv.current().file.path // Filtra per l'allenamento corrente
            }
        });
        ```
3.  **Registra i tuoi Allenamenti:** Durante o dopo l'allenamento, apri la nota della tua scheda. Usa i bottoni "➕ Aggiungi Log" generati dallo script `ExerciseLogTable_Combined.js` per registrare rapidamente serie, ripetizioni e peso per ogni esercizio. Lo script creerà automaticamente i file di log nella cartella `theGYM/Log/Data/` con i campi `Esercizio::` e `Origine::` precompilati.
4.  **Analizza i tuoi Progressi:**
    * **Nelle note degli esercizi:** Inserisci un blocco `dataviewjs` che chiama `VolumeChartTemplate.js` per vedere il trend del volume per quell'esercizio specifico.
        ```dataviewjs
        await dv.view("theGYM/Scripts/VolumeChartTemplate.js", {
            input: {
                // chartType: "exercise", // Default
                // exercisePath: dv.current().file.path // Automatico se nella nota dell'esercizio
                title: "Trend Volume " + dv.current().file.name.replace(".md","")
            }
        });
        ```
    * **Nelle note degli allenamenti:** Puoi anche aggiungere un grafico del volume totale dell'allenamento.
        ```dataviewjs
        await dv.view("theGYM/Scripts/VolumeChartTemplate.js", {
            input: {
                chartType: "workout",
                // workoutPath: dv.current().file.path // Automatico se nella nota dell'allenamento
                title: "Trend Volume Totale " + dv.current().file.name.replace(".md","")
            }
        });
        ```
    * **Dashboard (Opzionale):** Crea una nota "00 Dashboard Allenamento.md" con query Dataview più generali o link ai tuoi grafici e tabelle preferiti per una visione d'insieme.

## Requisiti Plugin Obsidian

* **Dataview:** Fondamentale per l'esecuzione di tutti gli script e le query.
* **Obsidian Charts (Consigliato):** Necessario per la visualizzazione dei grafici generati da `VolumeChartTemplate.js`. Se non installato, lo script mostrerà una tabella di fallback.
* **Moment.js:** Utilizzato internamente da Dataview e dagli script per la gestione delle date. Di solito è già disponibile.

## Personalizzazione

* **Percorsi delle Cartelle:** Se usi una struttura di cartelle diversa da quella suggerita (es. `theGYM/Log/Data`), dovrai aggiornare il percorso `DEFAULT_TEMPLATE_PATH` nello script `ExerciseLogTable_Combined.js` e `logFolderPath` in `VolumeChartTemplate.js`.
* **Campi dei Log:** Puoi personalizzare i campi predefiniti per i nuovi log modificando `DEFAULT_FIELDS` e la funzione `additionalFields` nello script `ExerciseLogTable_Combined.js`.
* **Aspetto:** Puoi modificare gli stili CSS direttamente negli script se necessario, o usare snippet CSS di Obsidian per personalizzare l'aspetto delle tabelle e dei grafici.

---

Questo README è un punto di partenza. Sentiti libero di espanderlo con più dettagli specifici per la tua configurazione e il tuo utilizzo!